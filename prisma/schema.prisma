// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   name      String?
//   password  String // hashed
//   role      Role     @default(MEMBER)
//   tasks     Task[]   @relation("AssigneeTasks")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum Role {
//   ADMIN
//   MANAGER
//   MEMBER
// }

// model Task {
//   id          String     @id @default(cuid())
//   title       String
//   description String?
//   status      TaskStatus @default(TODO)
//   assignee    User?      @relation("AssigneeTasks", fields: [assigneeId], references: [id])
//   assigneeId  String?
//   createdBy   String
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
// }

// enum TaskStatus {
//   TODO
//   IN_PROGRESS
//   DONE
// }


// --- keep your existing generator/datasource blocks ---

enum OrgRole {
  OWNER
  ADMIN
  VIEWER
}


enum TaskStatus { 
  TODO 
  IN_PROGRESS 
  DONE 
  }
  

model Organization {
  id         String         @id @default(cuid())
  name       String         @unique   // <-- make it unique
  parentId   String?
  parent     Organization?  @relation("OrgHierarchy", fields: [parentId], references: [id])
  children   Organization[] @relation("OrgHierarchy")
  members    Membership[]
  tasks      Task[]         @relation("OrgTasks")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}


model Membership {
  id      String        @id @default(cuid())
  userId  String
  orgId   String
  role    OrgRole       @default(VIEWER)

  user    User          @relation(fields: [userId], references: [id])
  org     Organization  @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String

  // back-refs
  memberships   Membership[]
  createdTasks  Task[]   @relation("CreatedTasks")
  assignedTasks Task[]   @relation("AssignedTasks")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(TODO)
  category     String?
  order        Int          @default(0)

  // ↔︎ Organization (name the relation, and reference it from Organization.tasks)
  orgId        String
  org          Organization @relation("OrgTasks", fields: [orgId], references: [id])

  // ↔︎ Creator
  createdById  String
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])

  // ↔︎ Assignee (optional)
  assigneeId   String?
  assignee     User?        @relation("AssignedTasks", fields: [assigneeId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}



model AuditLog {
  id        String   @id @default(cuid())
  at        DateTime @default(now())
  actorId   String?
  action    String
  resource  String?
  resourceId String?
  meta      Json?
}
